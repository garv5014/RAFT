@page "/inventory"
@using Raft_Library.Shop.shared
@rendermode InteractiveServer
@inject IInventoryService InventoryService

<h3>Inventory</h3>

<div class="row">
    @foreach (var product in products)
    {
        <div class="col-sm-6 col-md-4 mb-4 text-center">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text">Price: $@product.Price</p>
                    <p class="card-text">Stock: @product.Stock</p>
                    <button class="btn btn-primary mr-2 my-2" @onclick="() => AddToStock(product)">+</button>
                    <button class="btn btn-danger ml-2 my-2" @onclick="() => RemoveFromStock(product)">-</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Product> products = new List<Product>
    {
        new Product { Name = "Water Bottle" },
        new Product { Name = "Notebook"},
        new Product { Name = "Pen"},
        new Product { Name = "T-shirt"},
        new Product { Name = "Coffee Mug"}
    };

    protected override async Task OnInitializedAsync()
    {
        foreach (var product in products)
        {
            try
            {
                product.Stock = await InventoryService.GetItemStockAsync(product.Name);

            }
            catch (InvalidOperationException)
            {
                product.Stock = 0;
            }
        }
    }

    private async Task AddToStock(Product product)
    {
        if (await InventoryService.AddItemToStockAsync(product.Name, 1))
        {
            product.Stock += 1;
        }
        StateHasChanged();
    }

    private async Task RemoveFromStock(Product product)
    {
        try
        {
            if (await InventoryService.RemoveItemFromStockAsync(product.Name, 1))
            {
                    product.Stock = Math.Max(0, product.Stock - 1); // Prevent negative stock display

            }
        }
        catch (Exception)
        {
            product.Stock = 0;
        }
        StateHasChanged();
    }
}
